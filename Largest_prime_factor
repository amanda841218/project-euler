# Largest prime factor
import numpy as np
import math 

## sol 1
def find_prime(num):

	number = 3
	
	if num == 1:
		return False
	if num == 2:
		return True
	
	if num % 2 == 0:
		return False
	
	#find if the num is devisible by other numbers only up to the square root of it
	while num**0.5 >= number:
		if num % number == 0:
			return False
		
		number += 2
	
	return True

def find_factors(num):
	
	num_list = np.arange(1, num + 1)
	
	factors = list(filter(lambda x: num % x == 0, num_list))
	
	return factors
	
	
def find_prime_factors(num):
	
	factors = find_factors(num)
	
	prime_factors = list(filter(lambda x: find_prime(x) == True, factors))
	
	return prime_factors


#-----------------------------
number = 600851475143
sol = max(find_prime_factors(number))


# sol 1 might cause memory crash

## sol 2
  
# A function to find largest prime factor 
def maxPrimeFactors (n): 
      
    # Initialize the maximum prime factor 
    # variable with the lowest one 
    maxPrime = -1
      
    # Print the number of 2s that divide n 
    while n % 2 == 0: 
        maxPrime = 2
        n >>= 1
          
    # n must be odd at this point,  
    # thus skip the even numbers and  
    # iterate only for odd integers 
    for i in range(3, int(math.sqrt(n)) + 1, 2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
      
    # This condition is to handle the  
    # case when n is a prime number  
    # greater than 2 
    if n > 2: 
        maxPrime = n 
      
    return int(maxPrime)
